“delayed_job” is a ruby gem which is used to execute the tasks as a background process
in Rails environment which in turn increases page rendering speed.
Delayed::Job (or DJ) is used to asynchronously execute longer tasks in the background.

Step 1: First go to your Gemfile and add ‘delayed_job_active_record’ gem here.
gem ‘delayed_job_active_record’
Step 2: Then run the bundle command to install the gem :
$ bundle install
Step 3: For set up delayed_job we run generator called delayed_job:active_record.
$ rails g delayed_job:active_record
￼
It create new migration.
Step 4: Run following command to create those table for our new migration file.
$ bundle exec rake db:migrate
Step 5: For start up delayed_job there a rake task provided called jobs:work.
$ bundle exec rake jobs:work
Now we have the delayed job setup. We need to modify our rails app now
Step 6: Open our controller file remove those things which take long time. So we need to remove —
UserMailer.registration_confirmation(@user).deliver
Step 7: Create a method ‘mail_deliver’ in our model as follows —
class User < ActiveRecord::Base def mail_deliver
sleep(5)
UserMailer.registration_confirmation(self).deliver end
end
Step 8: DJ code is really easy to write and understand. All you have to do is add .delay.method(parameters) to any object to call method asynchronously (i.e. in the background; your code will move right along and not wait for the output) with the given parameters. So the long running method move to the
background process. We just call —
@user.delay.mail_deliver
Now our controller is look like —
if @user.save
@user.delay.mail_deliver
format.html { redirect_to @user, notice: 'User was successfully created..Delivering mail to your email..' }
format.json { render :show, status: :created, location: @user } else
format.html { render :new }
format.json { render json: @user.errors, status: :unprocessable_entity }
end
Step 9; now run your app
$ rails server
Now you can see the magic of background task.